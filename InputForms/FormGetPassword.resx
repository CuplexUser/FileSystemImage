<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWpewEFqXsK9enLT/VI2lzAAAAAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABal7BAWpewgDpickoAAAAwAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFqXsBBal7DPa67F/5vi7/9al7D/AAAANAAA
        AAQAAAAAAAAAAAAAAAAAAAAAWpewIFqXsHBal7CvWpew712ctv9jpcH/WJOr9jdca50fNDxdAAAADwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABal7AgWpewz2ivyP9/zeP/nOPv/1qX
        sP8AAAA+AAAAMUl7jxRal7BQWpewn1qXsN9cm7T/YKK8/2aqx/9qsc//a7PR/2uz0f9pq8T/drjM/1iU
        rfQAAAAuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWpewMFqXsO9st9D/dsnh/4DP
        5P+d4/D/Wpew/zlfbp1Cb4HaUIac/1+guv9kp8P/abDN/2u00v9rtNL/bLXT/1qwsP8YozD/GZ4z/3jB
        2/+c4u//Wpew/wAAAC0AAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGiwxlBfobnvb73U/3jM
        4/93y+L/gNDl/57k8P9al7D/TYGX/1GHnv9al7D/a7TS/2u10/9sttX/bLfW/2y31/9bs7T/Hqw8/ya+
        TP8QnyH/ecTf/5zj7/9al7D/AAAAHAAAABkAAAARAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAbbnO/3bJ
        3/950Ob/ec7k/3jN5P+B0ub/n+Tw/1qXsP9Vjqb/VY+o/1uatP9st9b/bLjY/2252f9tutr/XLa4/yGv
        Qf8rw1f/Jr5M/xCfIf96xuL/nePw/1qXsP8AAAAOAAAACwAAAAcAAAAEAAAAAAAAAAAAAAAAAAAAAAAA
        AABwv9P/e9Po/3rR5/950Ob/ec7l/4LT5/+g5fH/Wpew/1eSq/9XlK3/XZ66/2262v9tu9z/brzd/124
        u/8iskb/MMhg/yvDV/8mvkz/EJ8h/3vJ5f+e5PD/Wpew/wAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHPF2P971On/e9Po/3rS5/960Ob/g9Xo/6Hm8f9al7D/WZex/1mYs/9for//br3e/26+
        4P9dur7/JLRI/zLLZv8wyGD/K8NX/ya+TP8QnyH/UreY/6Dl8P9al7D/AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAdcjb/3zW6v971en/e9Po/3rS5/+E1+n/o+fx/1qXsP9am7b/W524/2Cm
        xP9vwOL/XrzA/yW2Sv8zy2f/Mstm/zDIYP8rw1f/Jr5M/yC4QP8Tpif/HJ4u/0CUff8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2yt3/fdjr/3zW6v981en/e9Tp/4XY6/+k5/L/Wpew/1yf
        vP9dob7/YqrJ/16+wv8muEz/M8tn/zPLZ/8yy2b/MMhg/yvDV/8mvkz/ILhA/xmyM/8SqyT/CJgR/wWL
        Cp8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHbK3f992ez/fdjr/33X6/981ur/htrs/6Xo
        8v9al7D/XqPB/1+lw/9UrK3/JrlO/zPLZ/8zy2f/M8tn/zLLZv8wyGD/K8NX/ya+TP8guED/GbIz/xKr
        JP8KoxX/BJUH/wOIB58AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdsrd/37b7f9+2u3/fdns/33Y
        6/+C2uz/oufy/1ybtP9cnLb/X6bE/zG7U/9m2I3/M8tn/zPLZ/8zy2f/Mstm/zDIYP8rw1f/Jr5M/yC4
        QP8ZsjP/Eqsk/wqjFf8CmwX/AZEC/wKGBVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2yt3/f93u/3/c
        7v9+2+3/ftrt/37a7P992ez/g9jp/4vL2v9bmLL/TtBz/+n87P9Z1YT/M8tn/zPLZ/8yy2b/MMhg/yvD
        V/8mvkz/ILhA/xmyM/8SqyT/CqMV/wKbBf8AmQD/AogD3wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHbK
        3f+A3+//f97v/3/d7v9/3O7/ftvt/37b7f+J3+//quv0/1qXsP9Ruaj/cN+Q/+n87P9Z1YP/M8tn/zLL
        Zv8wyGD/K8NX/ya+TP8guED/GbIz/xKrJP8KoxX/ApsF/wCZAP8BkAH/AYMCQAAAAAAAAAAAAAAAAAAA
        AAAAAAAAdsrd/4Hg8f+A3/D/gN/w/4De7/9/3u//f93u/4rg8P+s7PX/Wpew/2a22f9Tv7D/cN+Q/+j8
        6/9Z1YP/Mstm/zDIYP8rw1f/Jr5M/1TKZP8sukL/Eqsk/wqjFf8CmwX/AJkA/wCVAf8BgwKAAAAAAAAA
        AAAAAAAAAAAAAAAAAAB2yt3/geLy/4Hh8f+B4fH/gODw/4Dg8P+A3/D/i+Lx/67t9f9al7D/aLrd/2i7
        3/9Xxrj/b9+Q/+X86f9X1IH/MMhg/yvDV/8mvkz/O69E/6Xzrv962oL/CqMV/wKbBf8AmQD/AJkA/wGC
        Aa8AAAAAAAAAAAAAAAAAAAAAAAAAAHbK3f+C5PP/guPy/4Hi8v+B4vL/geHx/4Hh8f+M5PL/r+72/1qX
        sP9pveL/ar7k/2/J7/9c0MT/bd+P/+D85f9U0nv/K8NX/ya+TP8PmR7/QMVy/4Lxof+i7ab/D6ER/wCZ
        AP8AmQD/AYIBvwAAAAAAAAAAAAAAAAAAAAAAAAAAdsrd/4Pl9P+C5fT/guTz/4Lk8/+C4/P/guPy/43m
        8/+x7/b/Wpew/2vA5f9rwuf/cMvy/3XT/f9c0cX/ad+N/9f73f9OznH/Jr5M/xCfIf9al7D/M8tnn2Ph
        hf9mzGf/AJkA/wCZAP8BggG/AAAAAAAAAAAAAAAAAAAAAAAAAAB2yt3/g+f1/4Pm9f+D5vT/g+X0/4Pl
        9P+C5fT/juf0/7Pw9/9al7D/bMPp/2zE6/9xzfX/ddT+/3XV//9c0cb/ZN+K/8n70P9Gymb/EJ8h/1qX
        sP8AAAAANcxnv33fh/8AmQD/AJkA/wGCAb8AAAAAAAAAAAAAAAAAAAAAAAAAAHbK3f+E6fb/hOj2/4Tn
        9f+E5/X/g+f1/4Pn9f+P6fX/tfH3/1qXsP9txuz/bsfu/3LO9/911f//ddX//3XV//9c0cb/W96F/7f7
        wP8lpzL/Wpew/wAAAAAzy2dQcNuB/wCZAP8AmAD/AYIBnwAAAAAAAAAAAAAAAAAAAAAAAAAAdsrd/4Xq
        9/+F6vf/hOn3/4Tp9v+E6fb/hOj2/5Hr9v+38vj/Wpew/2/I7/9vyfH/ctD4/3XV//911f//ddX//3XV
        //9c0cb/Tdp7/068bP9al7D/AAAAADPLZ0Bdz2v/AJkA/wCSAf8BgwJwAAAAAAAAAAAAAAAAAAAAAAAA
        AAB2yt3/huz4/4Xr+P+F6/j/her3/4Xq9/+F6vf/kuz3/7n0+f9al7D/b8ry/3DM8/9y0Pn/ddX//3XV
        //911f//ddX//3XV//+G3P3/t/P4/1qXsP8AAAAAM8tngFHDVf8AmQD/AYwC/wGDAhAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHbK3f+G7fn/hu35/4bs+f+G7Pj/huz4/4Xs+P+T7vj/u/X5/1qXsP9wzPT/cM31/3PR
        +v911f//ddX//3XV//911f//ddX//4bd/v+59Pn/Wpew/wAAAAAWryyfG6cd/wCXAf8ChQSPAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAdsrd/4fu+v+H7vr/hu76/4bu+f+G7fn/hu35/5Tv+f+99vr/Wpew/3HO
        9/9yzvf/dNP8/3XV//911f//ddX//3XV//911f//h93+/7v1+v9al7D/AJkAEAmhE/8DmgX/AowFzwKG
        BRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2yt3/h/D7/4fw+/+H7/v/h+/6/4fv+v+H7vr/lfD6/7/3
        +/9al7D/ctD5/3TS/P911f//ddX//3XV//911f//ddX//3XV//+H3f7/vvf6/1WXpv8GmgzPCaET/wSO
        Cd8EiQgwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHbK3f+I8fz/iPH8/4jx+/+I8Pv/h/D7/4fw
        +/+W8vv/wfj7/1qXsP911P7/ddX//3XV//911f//ddX//3XV//911f//ddX//4je/v/A+Pv/L5pc/w2e
        Gf8Hjw2/BYsKEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdsrd/4jy/f+I8vz/iPL8/4jy
        /P+I8fz/iPH8/6L1/P/D+vz/W5ix/3XV//911f//ddX//3XV//911f//ddX//3XV//911f//iN7+/8L5
        /P9anq//CJAPYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2yt3/ifP9/4nz
        /f+J8/3/ifP9/5/2/f+2+f3/xfv9/5za5P9eoLn/ddX//3XV//911f//ddX//3XV//911f//ddX//3XV
        //+d6P7/xPv9/2Olwf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHbK
        3f+J9P7/jfX+/6H3/v+/+/3/wvn7/57j7f9/zt//br/Z/3jR9/+K3///it///57p/v+e6f7/svL+/7Ly
        /v/G/P3/xvz9/8b8/f/A9/r/ZqvI/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAdsrd/6r5/v/G/f7/v/f6/5rg6/97zd//ld3p/7n0+v/J/f7/yf3+/8n9/v/J/f7/sevz/7Hr
        8/+a2Oj/mtjo/4jK3/+Cxtz/cbjU/2uz0e9qsc9gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAB2yt3/u/X5/5be6v91ydz/idHj/6Lg7P+b2ej/m9no/4PG3P+Dxtz/a7PR/2uz
        0f9rs9G/a7PRv2uz0YBrs9GAa7PRQGuz0UBrs9EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAHXI3M90xtv/cL3W/2y10u9rs9G/a7PRr2uz0YBrs9Fwa7PRQGuz
        0UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/g/4f/wHgB/4AAAf8AAAD+AAAAPgAAAD4AAAH+AAAD/gAAA/4AAAH+AA
        AA/gAAAH4AAAB+AAAAPgAAAD4AAAA+AAAAPgAAAD4AAAg+AAAIPgAACD4AAAg+AAAIfgAAAH4AAAD+AA
        AB/gAAB/4AAA/+AAAP/gAAD/4AAD/+AH//8=
</value>
  </data>
</root>